// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: Desktop/CompilerProject/Lexer.flex

/* JFlex example: part of Java language lexer specification */
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java_cup.runtime.ComplexSymbolFactory.Location;

/**
* This class is a simple example lexer.
*/

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner, sym, Constants {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\11\21"+
    "\1\22\1\23\1\24\1\25\1\26\2\0\4\27\1\30"+
    "\25\27\1\31\1\32\1\33\1\34\1\35\1\0\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\27\1\47\1\50\1\51\1\52\1\53\1\54\1\27"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\3\27\1\63"+
    "\1\64\1\65\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\20\25\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\0\1\43\1\44\1\0"+
    "\1\2\1\0\1\45\1\46\1\47\1\50\5\25\1\51"+
    "\5\25\1\52\1\53\2\25\1\54\7\25\1\55\1\56"+
    "\1\57\1\60\1\61\3\0\1\6\10\25\1\62\1\25"+
    "\1\63\1\25\1\64\7\25\1\0\1\65\1\0\1\2"+
    "\1\25\1\66\3\25\1\67\11\25\1\70\1\71\1\25"+
    "\1\72\1\73\2\25\1\74\1\75\1\76\1\25\1\0"+
    "\4\25\1\77\1\25\1\100\1\25\1\101\1\25\1\102"+
    "\1\103\1\104\2\25\1\105\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\154\0\242\0\330\0\154\0\154"+
    "\0\u010e\0\154\0\154\0\u0144\0\u017a\0\154\0\u01b0\0\u01e6"+
    "\0\u021c\0\u0252\0\u0288\0\154\0\154\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\154\0\154\0\154\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8"+
    "\0\u061e\0\u0654\0\u068a\0\u06c0\0\154\0\u06f6\0\154\0\u072c"+
    "\0\154\0\u0762\0\154\0\154\0\154\0\154\0\u01e6\0\154"+
    "\0\u0798\0\u07ce\0\u0804\0\u0252\0\154\0\154\0\154\0\154"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0360\0\u0a8c\0\u0ac2\0\u0af8\0\u0360"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\154"+
    "\0\154\0\154\0\154\0\154\0\u0ca8\0\u0cde\0\u0d14\0\u0360"+
    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4"+
    "\0\u0360\0\u0efa\0\u0360\0\u0f30\0\u0360\0\u0f66\0\u0f9c\0\u0fd2"+
    "\0\u1008\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u10e0\0\u1116\0\u0cde"+
    "\0\u114c\0\u0360\0\u1182\0\u11b8\0\u11ee\0\u0360\0\u1224\0\u125a"+
    "\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u0360"+
    "\0\u0360\0\u140a\0\u0360\0\u0360\0\u1440\0\u1476\0\u0360\0\u0360"+
    "\0\u0360\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u0360"+
    "\0\u15f0\0\u0360\0\u1626\0\154\0\u165c\0\u0360\0\u0360\0\u0360"+
    "\0\u1692\0\u16c8\0\u0360\0\u0360\0\u0360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\31\1\32"+
    "\1\3\1\33\1\34\1\3\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\2\31\1\43\2\31\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\31\1\53\1\54\1\55"+
    "\1\56\1\57\2\60\2\3\1\60\1\61\24\60\1\62"+
    "\33\60\70\0\1\4\110\0\1\63\47\0\1\64\70\0"+
    "\1\65\66\0\1\66\2\0\1\67\1\0\1\22\1\23"+
    "\61\0\1\70\1\67\1\0\1\22\1\23\64\0\2\71"+
    "\56\0\1\72\4\0\1\73\64\0\1\67\1\0\2\74"+
    "\62\0\1\67\1\0\2\23\71\0\1\75\1\76\64\0"+
    "\1\77\65\0\1\100\60\0\2\31\5\0\2\31\4\0"+
    "\26\31\23\0\2\31\5\0\2\31\4\0\15\31\1\101"+
    "\10\31\23\0\2\31\5\0\2\31\4\0\20\31\1\102"+
    "\5\31\23\0\2\31\5\0\2\31\4\0\1\31\1\103"+
    "\11\31\1\104\2\31\1\105\7\31\23\0\2\31\5\0"+
    "\2\31\4\0\16\31\1\106\7\31\23\0\2\31\5\0"+
    "\2\31\4\0\13\31\1\107\12\31\23\0\2\31\5\0"+
    "\2\31\4\0\1\31\1\110\11\31\1\111\2\31\1\112"+
    "\4\31\1\113\2\31\23\0\2\31\5\0\2\31\4\0"+
    "\6\31\1\114\6\31\1\115\10\31\23\0\2\31\5\0"+
    "\2\31\4\0\1\31\1\116\24\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\117\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\20\31\1\120\5\31\23\0\2\31\5\0"+
    "\2\31\4\0\20\31\1\121\5\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\122\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\123\2\31\1\124\23\0\2\31"+
    "\5\0\2\31\4\0\20\31\1\125\5\31\23\0\2\31"+
    "\5\0\2\31\4\0\16\31\1\126\7\31\23\0\2\31"+
    "\5\0\2\31\4\0\10\31\1\127\15\31\67\0\1\130"+
    "\1\0\2\60\2\0\1\60\1\0\24\60\1\0\33\60"+
    "\5\0\1\131\44\0\1\132\2\0\1\133\1\0\1\134"+
    "\26\0\2\71\6\0\1\135\11\0\1\135\23\0\12\136"+
    "\1\137\53\136\2\73\1\4\1\5\62\73\20\0\2\31"+
    "\5\0\2\31\4\0\4\31\1\140\21\31\23\0\2\31"+
    "\5\0\2\31\4\0\5\31\1\141\20\31\23\0\2\31"+
    "\5\0\2\31\4\0\21\31\1\142\4\31\23\0\2\31"+
    "\5\0\2\31\4\0\5\31\1\143\20\31\23\0\2\31"+
    "\5\0\2\31\4\0\15\31\1\144\10\31\23\0\2\31"+
    "\5\0\2\31\4\0\23\31\1\145\2\31\23\0\2\31"+
    "\5\0\2\31\4\0\21\31\1\146\4\31\23\0\2\31"+
    "\5\0\2\31\4\0\13\31\1\147\12\31\23\0\2\31"+
    "\5\0\2\31\4\0\16\31\1\150\7\31\23\0\2\31"+
    "\5\0\2\31\4\0\20\31\1\151\5\31\23\0\2\31"+
    "\5\0\2\31\4\0\15\31\1\152\10\31\23\0\2\31"+
    "\5\0\2\31\4\0\22\31\1\153\3\31\23\0\2\31"+
    "\5\0\2\31\4\0\11\31\1\154\14\31\23\0\2\31"+
    "\5\0\2\31\4\0\25\31\1\155\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\156\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\157\3\31\23\0\2\31\5\0"+
    "\2\31\4\0\20\31\1\160\5\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\161\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\23\31\1\162\2\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\163\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\164\14\31\16\0\1\165\1\0"+
    "\1\165\2\0\2\166\44\0\12\136\1\167\65\136\1\167"+
    "\4\136\1\170\46\136\20\0\2\31\5\0\2\31\4\0"+
    "\1\31\1\171\24\31\23\0\2\31\5\0\2\31\4\0"+
    "\5\31\1\172\20\31\23\0\2\31\5\0\2\31\4\0"+
    "\1\31\1\173\24\31\23\0\2\31\5\0\2\31\4\0"+
    "\22\31\1\174\3\31\23\0\2\31\5\0\2\31\4\0"+
    "\2\31\1\175\23\31\23\0\2\31\5\0\2\31\4\0"+
    "\5\31\1\176\3\31\1\177\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\21\31\1\200\4\31\23\0\2\31\5\0"+
    "\2\31\4\0\1\31\1\201\24\31\23\0\2\31\5\0"+
    "\2\31\4\0\3\31\1\202\22\31\23\0\2\31\5\0"+
    "\2\31\4\0\15\31\1\203\10\31\23\0\2\31\5\0"+
    "\2\31\4\0\15\31\1\204\10\31\23\0\2\31\5\0"+
    "\2\31\4\0\23\31\1\205\2\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\206\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\207\3\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\210\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\4\31\1\211\21\31\23\0\2\31\5\0"+
    "\2\31\4\0\13\31\1\212\12\31\23\0\2\166\44\0"+
    "\12\136\1\167\4\136\1\4\46\136\20\0\2\31\5\0"+
    "\2\31\4\0\12\31\1\213\13\31\23\0\2\31\5\0"+
    "\2\31\4\0\20\31\1\214\5\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\215\14\31\23\0\2\31\5\0"+
    "\2\31\4\0\13\31\1\216\12\31\23\0\2\31\5\0"+
    "\2\31\4\0\6\31\1\217\17\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\220\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\221\3\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\222\3\31\13\0\1\223\7\0"+
    "\2\31\5\0\2\31\4\0\26\31\23\0\2\31\5\0"+
    "\2\31\4\0\22\31\1\224\3\31\23\0\2\31\5\0"+
    "\2\31\4\0\20\31\1\225\5\31\23\0\2\31\5\0"+
    "\2\31\4\0\15\31\1\226\10\31\23\0\2\31\5\0"+
    "\2\31\4\0\3\31\1\227\22\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\230\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\15\31\1\231\10\31\23\0\2\31\5\0"+
    "\2\31\4\0\5\31\1\232\20\31\23\0\2\31\5\0"+
    "\2\31\4\0\11\31\1\233\14\31\14\0\1\234\74\0"+
    "\2\31\5\0\2\31\4\0\13\31\1\235\12\31\23\0"+
    "\2\31\5\0\2\31\4\0\15\31\1\236\10\31\23\0"+
    "\2\31\5\0\2\31\4\0\7\31\1\237\16\31\23\0"+
    "\2\31\5\0\2\31\4\0\10\31\1\240\15\31\23\0"+
    "\2\31\5\0\2\31\4\0\23\31\1\241\2\31\23\0"+
    "\2\31\5\0\2\31\4\0\16\31\1\242\7\31\23\0"+
    "\2\31\5\0\2\31\4\0\15\31\1\243\10\31\23\0"+
    "\2\31\5\0\2\31\4\0\5\31\1\244\20\31\23\0"+
    "\2\31\5\0\2\31\4\0\15\31\1\245\10\31\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5886];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\2\1\2\11\1\1\2\11\2\1\1\11"+
    "\5\1\2\11\4\1\3\11\20\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\4\11\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\4\11\27\1\5\11\3\0\25\1\1\0"+
    "\1\1\1\0\33\1\1\0\10\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[165];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();
    ComplexSymbolFactory symbolFactory = new ComplexSymbolFactory();

    public static int Counter = 1;

    private void print(String text, int line, int column, String type){
        System.out.printf("%03d- %s\t\t  Line %02d\t\t Col %02d\t\t Content = [%s]\n", Counter++, type, line, column, text );
    }

    public Lexer(java.io.Reader in, ComplexSymbolFactory sf){
    	this(in);
    	symbolFactory = sf;
    }

      private Symbol symbol(String name, int sym) 
    {
     //   System.out.printf("Founded token: %s\n", name);
        return symbolFactory.newSymbol(name, sym, new Location(yyline+1,yycolumn+1,(int)yychar), new Location(yyline+1,yycolumn+yylength(),(int)yychar+yylength()));
    }

    private Symbol symbol(String name, int sym, Object val)
    {
    //    System.out.printf("Founded token: %s\n", name);
        Location left = new Location(yyline+1,yycolumn+1,(int)yychar);
        Location right= new Location(yyline+1,yycolumn+yylength(), (int)yychar+yylength());
        return symbolFactory.newSymbol(name, sym, left, right,val);
    }

    private Symbol symbol(String name, int sym, Object val,int buflength)
     {
      //  System.out.printf("Founded token: %s\n", name);
        Location left = new Location(yyline+1,yycolumn+yylength()-buflength,(int)yychar+yylength()-buflength);
        Location right= new Location(yyline+1,yycolumn+yylength(), (int)yychar+yylength());
        return symbolFactory.newSymbol(name, sym, left, right,val);
    }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Parsing Failed! Illegal character ["+ yytext()+"] at line " + yyline + ", col " + yycolumn);
            }
            // fall through
          case 72: break;
          case 2:
            { /* ignore */
            }
            // fall through
          case 73: break;
          case 3:
            { return symbol("Not",        NOT,   new Integer(Not)        );
            }
            // fall through
          case 74: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 75: break;
          case 5:
            { return symbol("Modulo",     MODULO                                );
            }
            // fall through
          case 76: break;
          case 6:
            { return symbol("and",        AND                                 );
            }
            // fall through
          case 77: break;
          case 7:
            { return symbol("(",          OPAR                                );
            }
            // fall through
          case 78: break;
          case 8:
            { return symbol(")",          CPAR                               );
            }
            // fall through
          case 79: break;
          case 9:
            { return symbol("Mult",       MULT,   new Integer(Mult)       );
            }
            // fall through
          case 80: break;
          case 10:
            { return symbol("Plus",       PLUS,   new Integer(Plus)       );
            }
            // fall through
          case 81: break;
          case 11:
            { return symbol(",",          COMMA                               );
            }
            // fall through
          case 82: break;
          case 12:
            { return symbol("Minus",      MINUS,   new Integer(Minus)      );
            }
            // fall through
          case 83: break;
          case 13:
            { return symbol("Dot",        DOT                                 );
            }
            // fall through
          case 84: break;
          case 14:
            { return symbol("Divide",     DIVIDE,   new Integer(Divide)     );
            }
            // fall through
          case 85: break;
          case 15:
            { return symbol("DecInt",     NumValue,     Integer.parseInt(yytext()) );
            }
            // fall through
          case 86: break;
          case 16:
            { return symbol(":",          COLON                               );
            }
            // fall through
          case 87: break;
          case 17:
            { return symbol(";",          SEMICOLON                                );
            }
            // fall through
          case 88: break;
          case 18:
            { return symbol("LoT",        COMPARATOR, new Integer(LoT)        );
            }
            // fall through
          case 89: break;
          case 19:
            { return symbol("=",          ASSIGN                              );
            }
            // fall through
          case 90: break;
          case 20:
            { return symbol("GrT",        COMPARATOR, new Integer(GrT)        );
            }
            // fall through
          case 91: break;
          case 21:
            { return symbol("Identifier", sym.Identifier, yytext()                 );
            }
            // fall through
          case 92: break;
          case 22:
            { return symbol("[",          OBRACE                          );
            }
            // fall through
          case 93: break;
          case 23:
            { return symbol("]",          CBRACE                          );
            }
            // fall through
          case 94: break;
          case 24:
            { return symbol("NNot",       NNOT                           );
            }
            // fall through
          case 95: break;
          case 25:
            { return symbol("{",          OBLOCK                          );
            }
            // fall through
          case 96: break;
          case 26:
            { return symbol("Or",         OR, new Integer(Or)         );
            }
            // fall through
          case 97: break;
          case 27:
            { return symbol("}",          CBLOCK                            );
            }
            // fall through
          case 98: break;
          case 28:
            { string.append( yytext() );
            }
            // fall through
          case 99: break;
          case 29:
            { yybegin(YYINITIAL);
                                 return symbol("StringConst", StringConst, string.toString(), string.length());
            }
            // fall through
          case 100: break;
          case 30:
            { string.append('\\');
            }
            // fall through
          case 101: break;
          case 31:
            { return symbol("NotEq",      sym.NEQ, new Integer(NotEq)      );
            }
            // fall through
          case 102: break;
          case 32:
            { return symbol("and",           AND                                 );
            }
            // fall through
          case 103: break;
          case 33:
            { return symbol ("Power",     POWER                                  );
            }
            // fall through
          case 104: break;
          case 34:
            { return symbol("PlusPlus",   PLUSPLUS                            );
            }
            // fall through
          case 105: break;
          case 35:
            { return symbol("MinusMinus", MINUSMINUS                          );
            }
            // fall through
          case 106: break;
          case 36:
            { return symbol("Float",      NumValue, java.lang.Float.valueOf(yytext())     );
            }
            // fall through
          case 107: break;
          case 37:
            { return symbol("LoTEq",         LTEQ                                 );
            }
            // fall through
          case 108: break;
          case 38:
            { return symbol("AngleBracket",  ANGBR                                );
            }
            // fall through
          case 109: break;
          case 39:
            { return symbol("Eq",         COMPARATOR, new Integer(Eq)         );
            }
            // fall through
          case 110: break;
          case 40:
            { return symbol("GrTEq",         GTEQ                                 );
            }
            // fall through
          case 111: break;
          case 41:
            { return symbol("do",         DO                                 );
            }
            // fall through
          case 112: break;
          case 42:
            { return symbol("if",         IF                                    );
            }
            // fall through
          case 113: break;
          case 43:
            { return symbol("in",         IN                                    );
            }
            // fall through
          case 114: break;
          case 44:
            { return symbol("or",         OR                                 );
            }
            // fall through
          case 115: break;
          case 45:
            { return symbol("or",             OR                                 );
            }
            // fall through
          case 116: break;
          case 46:
            { string.append('\"');
            }
            // fall through
          case 117: break;
          case 47:
            { string.append('\n');
            }
            // fall through
          case 118: break;
          case 48:
            { string.append('\r');
            }
            // fall through
          case 119: break;
          case 49:
            { string.append('\t');
            }
            // fall through
          case 120: break;
          case 50:
            { return symbol("for",        FOR                               );
            }
            // fall through
          case 121: break;
          case 51:
            { return symbol("int",        Type,         new Integer(TypeInt)    );
            }
            // fall through
          case 122: break;
          case 52:
            { return symbol("new",        MemDef                                );
            }
            // fall through
          case 123: break;
          case 53:
            { return symbol("Double",      NumValue,     java.lang.Double.valueOf(yytext())    );
            }
            // fall through
          case 124: break;
          case 54:
            { return symbol("case",       CASE                                 );
            }
            // fall through
          case 125: break;
          case 55:
            { return symbol("else",       ELSE                                  );
            }
            // fall through
          case 126: break;
          case 56:
            { return symbol("true",       TRUE                                  );
            }
            // fall through
          case 127: break;
          case 57:
            { return symbol("void",       Type,         new Integer(TypeVoid)   );
            }
            // fall through
          case 128: break;
          case 58:
            { return symbol("break",      BREAK                                 );
            }
            // fall through
          case 129: break;
          case 59:
            { return symbol("clear",      CLEAR                                 );
            }
            // fall through
          case 130: break;
          case 60:
            { return symbol("elsif",      ELSIF                                  );
            }
            // fall through
          case 131: break;
          case 61:
            { return symbol("false",      FALSE                                 );
            }
            // fall through
          case 132: break;
          case 62:
            { return symbol("float",        Type,         new Integer(TypeFloat)    );
            }
            // fall through
          case 133: break;
          case 63:
            { return symbol("while",      WHILE                                 );
            }
            // fall through
          case 134: break;
          case 64:
            { return symbol("double",        Type,         new Integer(TypeDouble)    );
            }
            // fall through
          case 135: break;
          case 65:
            { return symbol("EntryPoint", EntryPoint                            );
            }
            // fall through
          case 136: break;
          case 66:
            { return symbol("return",     RETURN                               );
            }
            // fall through
          case 137: break;
          case 67:
            { return symbol("string",     Type,         new Integer(TypeString) );
            }
            // fall through
          case 138: break;
          case 68:
            { return symbol("switch",     SWITCH                                 );
            }
            // fall through
          case 139: break;
          case 69:
            { return symbol("println",    PRINTLN                                 );
            }
            // fall through
          case 140: break;
          case 70:
            { return symbol("continue",   CONTINUE                                 );
            }
            // fall through
          case 141: break;
          case 71:
            { return symbol("function",      TypeDef                               );
            }
            // fall through
          case 142: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
